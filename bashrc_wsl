# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]; then
	PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[35;1m\]$(__git_ps1)\[\033[00m\] \$\nÂ» '
else
	PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
	xterm*|rxvt*)
		PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
		;;
	*)
		;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	#alias dir='dir --color=auto'
	#alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

# golang
# =============================================================
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# asdf
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

# X11
# =============================================================
wsl_mount_root=/mnt
wsl_windir="${wsl_mount_root}/c/WINDOWS/System32"
wsl_distro=$WSL_DISTRO_NAME
wsl_wslg_display=0

# check if in-built wslg socket exists at all
if test -S $wsl_mount_root/wslg/.X11-unix/X0; then
	# fix is needed in case system socket in /tmp doesn't exist or it's true, canonical path isn't the wslg socket's one
	if ! test -e /tmp/.X11-unix/X${wsl_wslg_display} || ! test "$(readlink -f /tmp/.X11-unix/X${wsl_wslg_display})" = "$wsl_mount_root/wslg/.X11-unix/X0"; then
		echo -e "* WSL: restoring WSLG X11 server socket on /tmp/.X11-unix/X${wsl_wslg_display}"
		# recreate /tmp/.X11-unix directory if needed
		if test ! -d /tmp/.X11-unix; then
			$wsl_windir/wsl.exe -d $wsl_distro -u root install -dm 1777 -o root /tmp/.X11-unix
		fi
		# delete existing socket if needed. this must obviously break something that created that socket
		# and you'd rather define display not colliding with other sockets
		if test -e /tmp/.X11-unix/X${wsl_wslg_display}; then
			$wsl_windir/wsl.exe -d $wsl_distro -u root rm -Rf /tmp/.X11-unix/X${wsl_wslg_display} /tmp/.X${wsl_wslg_display}-lock
		fi
		# if desired display is different than wslg's default 0, check if WSLG socket doesn't already exist on X0
		# if yes, delete it aswell to avoid having the same wslg socket bound to two separate display numbers
		if test $wsl_wslg_display -ne 0; then
			if test -e /tmp/.X11-unix/X0 && test "$(readlink -f /tmp/.X11-unix/X0)" = "$wsl_mount_root/wslg/.X11-unix/X0"; then
				$wsl_windir/wsl.exe -d $wsl_distro -u root rm -Rf /tmp/.X11-unix/X0 /tmp/.X0-lock
			fi
		fi
		# create symlink to wslg socket
		$wsl_windir/wsl.exe -d $wsl_distro -u root ln -s $wsl_mount_root/wslg/.X11-unix/X0 /tmp/.X11-unix/X${wsl_wslg_display}
		# export updated display number for user's convenience
		export DISPLAY=:${wsl_wslg_display}
	fi
fi

# genie
# =============================================================
# Are we in the bottle?
if [[ -z ${INSIDE_GENIE} ]]; then
	if [ "$(command cut -d : -f1 < "/proc/$PPID/cmdline" | strings)" = "sshd" ]; then
		yn=n
	elif [[ $- == *i* ]]; then
		yn=y
	else
		read -p "yn? * Not inside the genie bottle; enter it? " yn
		echo
	fi

	if [[ $yn == "y" ]]; then
		echo "Starting genie:"
		exec /usr/bin/genie -s
	fi
fi

# SSH Agent
# =============================================================
SSH_ENV="$HOME/.ssh/environment"
function run_ssh_env {
	. "${SSH_ENV}" > /dev/null
}
function start_ssh_agent {
	ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
	chmod 600 "${SSH_ENV}"
	run_ssh_env;
}
if [ -f "${SSH_ENV}" ]; then
	run_ssh_env;
	ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
		start_ssh_agent;
	}
else
	start_ssh_agent;
fi
ssh-add $HOME/.ssh/conf.d/github

# incremental history search
# =============================================================
peco_search_history() {
	local l=$(HISTTIMEFORMAT= history | \
		sort -r | sed -E s/^\ *[0-9]\+\ \+// | \
		peco --query "$READLINE_LINE")
			READLINE_LINE="$l"
			READLINE_POINT=${#l}
		}
	bind -x '"\C-r": peco_search_history'

# ghq + peco
# =============================================================
function gcd() {
	local selected_file=$(ghq list --full-path | peco --query "$LBUFFER")
	if [ -n "$selected_file" ]; then
		if [ -t 1 ]; then
			cd ${selected_file}
		fi
	fi
}

# wsl open
# =============================================================
function open() {
	if [ $# != 1 ]; then
		explorer.exe .
	else
		if [ -e $1 ]; then
			cmd.exe /c start $(wslpath -w $1) 2> /dev/null
		else
			echo "open: $1 : No such file or directory" 
		fi
	fi
}

# pulseaudio
# =============================================================
#export PULSE_SERVER=tcp:$(grep nameserver /etc/resolv.conf | awk '{print $2}')

# direnv
# =============================================================
#eval "$(direnv hook bash)"

# cargo
# =============================================================
. "$HOME/.cargo/env"

# rust-analyzer from vim-lsp
# =============================================================
export PATH=$HOME/.local/share/vim-lsp-settings/servers/rust-analyzer:$PATH

# gh autocompletion
# =============================================================
eval "$(gh completion -s bash)"
